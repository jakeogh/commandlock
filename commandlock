#!/bin/echo source_this_file
# commandlock - Atomic locking for commands.
# https://github.com/jakeogh/commandlock

# TODO exiting 1 here is better than the #!echo guard above since it exits 0
# nope. this tests for interactivity, not source
#case $- in
#    *i*) : ;;
#    *) echo "S source_this_file"; exit 1;;
#esac

set -o nounset

sourced() {
    [[ ${FUNCNAME[1]} = source ]]
}
sourced || { echo "source_this_file" ; exit 1 ; }  # specific string for testing

type sha1sum > /dev/null || exit 1

lock_folder_cl="/dev/shm"  # use tempfs to delete orphaned locks on reboot

if [ ! -d "${lock_folder_cl}" ]; then  # todo: add test for this
    printf >&2 'ERROR: [%s] %s %s %s not a directory.\n' "$$" "$0" "$*" "${lock_folder_cl}"
    exit 1
fi

lock_name_cl=$(printf '%s\0' "$0" "$@" | sha1sum -) || {
    printf >&2 'ERROR: [%s] %s %s generating lock filename with sha1sum.\n' "$$" "$0" "$*"
    exit 1
}

lock_name_cl=${lock_name_cl%% *}

if [ "${#lock_name_cl}" != "40" ]; then
    printf >&2 "ERROR: [%s] %s %s lock_name \"%s\"is not 40 bytes long.\n" \
        "$$" "$0" "$*" "${lock_name_cl}"
    exit 2
fi

# could check here for emptyhash da39a3ee5e6b4b0d3255bfef95601890afd80709

# if errexit was set, this line would cause exit before the lock was attempted
# but _only_ in the shell (interactive or not) that sourced this file, which is insufficient
readonly lock_cl="${lock_folder_cl}/commandlock_${lock_name_cl}"
unset lock_folder_cl
unset lock_name_cl

if ( set -o noclobber; : > "${lock_cl}" ) 2> /dev/null; then  # got lock
    # the trap must be set after creating lock, otherwise a locked-out script
    # will delete the lock becuase it set the trap before it attempted to
    # acquire the lock
    trap 'unlink -- "${lock_cl}"' \
        INT HUP ALRM PIPE PROF USR1 USR2 VTALRM STKFLT QUIT ABRT TERM EXIT
    # if the script that sourced this modifies the trap, then it's responsible
    # for deleting the lockfile

    #printf "%s" "$$">> "${lock_cl}"  # asking for trouble
else
    printf >&2 'ERROR: [%s] %s %s Locking failed: %s\n' "$$" "$0" "$*" "${lock_cl}"
    printf >&2 'ERROR: [%s] %s %s is/was already running. Exiting (1).\n' "$$" "$0" "$*"
    exit 1
fi
